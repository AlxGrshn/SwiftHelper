//
//  SwiftData.swift
//  SwiftHelper
//
//  Created by Roman on 25.10.2022.
//

struct Topic {
    let title: String
    let description: String
    
    static func getTopics() -> [Topic] {
        [
            Topic(
                title: "Константы и переменные",
                description:
"""
Константы - неизменяемые свойства.
Переменные - изменяемые свойства.

Используйте let для создания констант и var для объявления переменных.
Значение константы не обязательно должно быть известно на момент компиляции, но оно должно присваиваться строго один раз.
Это значит, что вы можете использовать константу для обозначения значения, определяемого единожды, но используемого во многих местах.

Константа или переменная должны иметь те же типы данных, которые вы хотите им присвоить. Хотя, вы не должны всегда явно объявлять тип.
Когда вы присваиваете значение при создании константы или переменной, компилятор логически предугадывает его тип.

Если присвоенное значение не дает достаточной информации (или когда значение еще не присвоено), укажите тип, написав его после названия, разделенной с помощью двоеточия.
"""
            ),
            Topic(
                title: "Типы данных",
                description:
"""
Тип данных — это множество всех возможных значений, а также операций над ними.

Например, если у параметра числовой тип данных, то ему может быть присвоено числовое значение, с которым можно проводить математические операции (сложение, вычитание, деление, умножение и т. д.).

Воспринимайте типы данных как абстракции, шаблоны, на основе которых создаются конкретные значения. Например, на основе типа данных «целое число» можно создать значения 2, 17, 36. Сам по себе тип «целое число» лишь выделяет диа- пазон возможных значений, но не несет никакой конкретики, никакой точной величины.
"""
            ),
            Topic(
                title: "Базовые операторы",
                description:
"""
Унарные операторы -  применяются одной величине (-3, !а)
Бинарные операторы - применяются к двум величинам (2+3)
Тернарные операторы - применяются к трем величинам. В SWIFT один тернарный условный оператор (a ? b : c)

Операнды - величины к которым применяются операторы ( 1 и 2 - операнды , если 1 + 2)
Операторы - специальные символы , при помощи которых можно производить, как арифметические действия, так и операции сравнения , изменения или проверки

Операторы делятся на:
- Арифметические операторы :
    - + сложение
    - - вычитание
    - * умножение
    - / деление
    - % остаток от деления

- Операторы присваивания:
    - a = b - инициализирует(изменяет) значение переменной a на значение переменной b

- Операторы сравнения
    - сравнивают меж собой два значения (a == b)
    - не равно a != b
    - больше, меньше >, <, >=, <=

- Операторы диапазона
    - оператор замкнутого диапазона (закрытого) a...b - диапазон значенией от a до  b включая сами значения
    - a..<, a..>, a...

- Логические операторы
    - (!) логическое значение НЕ
    - (&&) логическая И
    - (||) логическое ИЛИ (в случае если один из операндов имеет true)
"""
            ),
            Topic(
                title: "Операторы ветвлений",
                description:
"""
Цикл For-in
Цикл for-in используется для итерации по коллекциям элементов, таких как диапазоны чисел, элементы массива или символы в строке.

Цикл While
Цикл while выполняет набор инструкций до тех пор, пока его условие не станет false. Этот вид циклов лучше всего использовать в тех случаях, когда количество итераций до первого входа в цикл неизвестно. Swift предлагает два вида циклов while:
-   while - вычисляет условие выполнения в начале каждой итерации цикла.
Цикл while начинается с вычисления условия. Если условие истинно, то инструкции в теле цикла будут выполняться до тех пор, пока оно не станет ложным.

Цикл repeat-while
-   repeat-while - вычисляет условие выполнения в конце каждой итерации цикла.
Другой вариант цикла while, известный как цикл repeat-while, выполняет одну итерацию до того, как происходит проверка условия. Затем цикл продолжает повторяться до тех пор, пока условие не станет false.

Инструкция if
В самой простой своей форме инструкция if имеет всего одно условие if.
Эта инструкция выполняет установленные инструкции только в случае, когда условие true.
Инструкция if может предусматривать еще один дополнительный набор инструкций в ветке известной как оговорка else, которая нужна в случае, если условие false.

Инструкция switch
Инструкция switch подразумевает наличие какого-то значения, которое сравнивается с несколькими возможными шаблонами.
После того как значение совпало с каким-либо шаблоном, выполняется код, соответствующий ответвлению этого шаблона, и больше сравнений уже не происходит.
Switch представляет собой альтернативу инструкции if, отвечающей нескольким потенциальным значениям.
"""
            ),
            Topic(
                title: "Типы коллекций",
                description:
"""
Swift обеспечивает три основных типа коллекций - это Массивы, Множества и Словари для хранения коллекций значений.

Массивы - это упорядоченные коллекции значений.
Множества - это неупорядоченные коллекции уникальных значений.
Словари - это неупорядоченные коллекции, хранящие пары "ключ-значение".

Массивы
Массивы хранят много значений одинакового типа в упорядоченном списке. Одно и то же значение в массиве может появиться несколько раз, в разных позициях.

Множества
Множество хранит различные значения одного типа в виде коллекции в неупорядоченной форме. Вы можете использовать множества как альтернативы массиву, когда порядок для вас значения не имеет или когда вам нужно быть уверенным в том, что значения внутри коллекции не повторяются.

Словари
Словарь представляет собой контейнер, который хранит несколько значений одного и того же типа.
Каждое значение связано с уникальным _ключом_, который выступает в качестве идентификатора этого значения внутри словаря.
В отличие от элементов в массиве, элементы в словаре не имеют определенного порядка.
Используйте словарь, когда вам нужно искать значения на основе их идентификатора, так
же как в реальном мире словарь используется для поиска определения конкретного слова.
"""
            ),
            Topic(
                title: "Функции",
                description:
"""
Функции – это самостоятельные фрагменты кода, решающие определенную задачу.
Каждой функции присваивается уникальное имя, по которому ее можно идентифицировать и "вызвать" в нужный момент.

Каждая функция в Swift имеет тип, описывающий тип параметров функции и тип возвращаемого значения.
Тип функции можно использовать аналогично любым другим типам в Swift, т. е. одна функция может быть параметром другой функции либо ее результирующим значением.
Функции также могут вкладываться друг в друга, что позволяет инкапсулировать определенный алгоритм внутри локального контекста.

Объявление и вызов функций
При объявлении функции можно задать одно или несколько именованных типизированных значений, которые будут ее входными данными (или _параметрами_), а также тип значения, которое функция будет возвращать в качестве результата (или _возвращаемый тип_).

У каждой функции должно быть _имя_, которое отражает решаемую задачу.
Чтобы воспользоваться функцией, ее нужно "вызвать", указав имя и входные значения (_аргументы_), соответствующие типам параметров этой функции.
Аргументы функции всегда должны идти в том же порядке, в каком они были указаны при объявлении функции.
"""
            ),
            Topic(
                title: "Замыкания",
                description:
"""
Замыкания - это самодостаточные блоки с определенным функционалом, которые могут быть переданы и использованы в вашем коде.
Замыкания в Swift похожи на блоки в C и Objective-C, и лямбды в других языках программирования.

Замыкания могут захватывать и хранить ссылки на любые константы и переменные из контекста, в котором они объявлены.
Эта процедура известна как заключение этих констант и переменных, отсюда и название "замыкание".
Swift выполняет всю работу с управлением памятью при захвате за вас.

Глобальные и вложенные функции являются частным случаем замыканий.

Замыкания принимают одну из трех форм:
-   Глобальные функции являются замыканиями, у которых есть имя и которые не захватывают никакие значения.
-   Вложенные функции являются замыканиями, у которых есть имя и которые могут захватывать значения из включающей их функции.
-   Замыкающие выражения являются безымянными замыканиями, написанные в облегченном синтаксисе, которые могут захватывать значения из их окружающего контекста.
"""
            ),
            Topic(title: "Инструкция guard", description: ""),
            Topic(title: "Опциональные типы данных", description: ""),
            Topic(
                title: "Классы",
                description:
"""
Классы и структуры являются универсальными и гибкими конструкциями, которые станут строительными блоками для кода вашей программы.
Для добавления функциональности в классах и структурах можно объявить свойства и методы, применив тот же синтаксис, как и при объявлении констант, переменных и функций.

Экземпляр класса традиционно называют объектом.
Тем не менее, классы и структуры в Swift гораздо ближе по функциональности.
В связи с этим, употребляется более общий термин - экземпляр.

В отличие от типа значений, ссылочный тип не копируется, когда его присваивают переменной или константе, или когда его передают функции.
Вместо копирования используется ссылка на существующий экземпляр.

Классы имеют дополнительные возможности, которых нет у структур:
-   Наследование позволяет одному классу наследовать характеристики другого
-   Приведение типов позволяет проверить и интерпретировать тип экземпляра класса в процессе выполнения
-   Деинициализаторы позволяют экземпляру класса освободить любые ресурсы, которые он использовал
-   Подсчет ссылок допускает более чем одну ссылку на экземпляр класса.
"""
            ),
            Topic(title: "Структуры", description: ""),
            Topic(title: "Перечисления", description: ""),
            Topic(title: "Наследование", description: ""),
            Topic(title: "Протоколы", description: ""),
            Topic(title: "Расширения", description: ""),
        ]
    }
}


